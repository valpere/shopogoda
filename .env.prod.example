# ================================================================
# ShoPogoda Weather Bot - Production Environment Template
# ================================================================
#
# This template contains production-ready configurations for deploying
# ShoPogoda to cloud platforms (Fly.io, Vercel, Railway, GCP).
#
# Platform-specific notes are included for each deployment target.
#
# Usage:
#   1. Copy this file to .env.prod
#   2. Fill in your actual production values
#   3. Use platform-specific deployment instructions
#   4. NEVER commit .env.prod to git!
#
# ================================================================

# ================================================================
# BOT CONFIGURATION (Production)
# ================================================================

# Telegram Bot Token (REQUIRED)
# Get from @BotFather - use PRODUCTION bot token
TELEGRAM_BOT_TOKEN=your_production_bot_token_here

# Debug mode (MUST be false in production)
BOT_DEBUG=false

# Webhook mode (MUST be true for all cloud deployments)
BOT_WEBHOOK_MODE=true

# Webhook URL (set to your deployment URL + /webhook)
# Examples:
#   Fly.io:   https://shopogoda.fly.dev/webhook
#   Vercel:   https://shopogoda.vercel.app/webhook
#   Railway:  https://shopogoda.up.railway.app/webhook
#   GCP:      https://shopogoda-xyz.run.app/webhook
BOT_WEBHOOK_URL=https://your-app.platform.com/webhook

# Webhook port (use platform default)
# Fly.io/Railway/GCP: 8080
# Vercel: handled automatically
BOT_WEBHOOK_PORT=8080

# Demo mode (disable in production)
DEMO_MODE=false

# ================================================================
# DATABASE CONFIGURATION (Supabase - Recommended)
# ================================================================

# IMPORTANT: Use Transaction Pooler (port 6543) for serverless deployments
# Fly.io/Vercel/Railway/GCP all require connection pooling

# Supabase Transaction Pooler (RECOMMENDED for serverless)
DB_HOST=aws-1-us-east-2.pooler.supabase.com
DB_PORT=6543
DB_USER=postgres.your_project_ref
DB_PASSWORD=your_supabase_password
DB_NAME=postgres
DB_SSLMODE=require

# Alternative: Complete DATABASE_URL (use this OR individual vars above)
# Format: postgresql://USER:PASSWORD@HOST:PORT/DATABASE?sslmode=require
DATABASE_URL=postgresql://postgres.your_project_ref:your_password@aws-1-us-east-2.pooler.supabase.com:6543/postgres?sslmode=require

# Direct connection (only for migrations, NOT for app runtime)
DIRECT_URL=postgresql://postgres:your_password@db.your_project_ref.supabase.co:5432/postgres?sslmode=require

# ================================================================
# REDIS CONFIGURATION (Upstash - Recommended)
# ================================================================

# Platform-specific Redis configuration:

# Option 1: REST API (RECOMMENDED for Vercel serverless)
UPSTASH_REDIS_REST_URL=https://your-redis-name.upstash.io
UPSTASH_REDIS_REST_TOKEN=your_upstash_rest_token

# Option 2: Redis Protocol (Fly.io, Railway, GCP)
REDIS_URL=rediss://default:your_password@your-redis-name.upstash.io:6379

# Individual components (alternative to REDIS_URL)
REDIS_HOST=your-redis-name.upstash.io
REDIS_PORT=6379
REDIS_PASSWORD=your_upstash_password
REDIS_DB=0

# ================================================================
# WEATHER API CONFIGURATION
# ================================================================

# OpenWeatherMap API Key (REQUIRED)
# Free tier: 60 calls/minute, 1M calls/month
OPENWEATHER_API_KEY=your_openweather_api_key

# Air Quality API Key (optional)
# IQAir free tier: 10K calls/month
AIRQUALITY_API_KEY=your_iqair_api_key

# User-Agent
WEATHER_USER_AGENT=ShoPogoda-Weather-Bot/1.0 (production@yourdomain.com)

# Cache TTLs (optimized for production)
WEATHER_CACHE_TTL=600        # 10 minutes for current weather
FORECAST_CACHE_TTL=3600      # 1 hour for forecasts
GEOCODE_CACHE_TTL=86400      # 24 hours for geocoding

# ================================================================
# LOGGING CONFIGURATION (Production)
# ================================================================

# Log level (use 'info' or 'warn' in production)
LOG_LEVEL=info

# Log format (use 'json' for cloud platform log aggregation)
LOG_FORMAT=json

# ================================================================
# MONITORING & OBSERVABILITY (Production)
# ================================================================

# Prometheus metrics (exposed on separate port)
PROMETHEUS_PORT=2112

# Jaeger tracing (optional - use platform-specific endpoint)
JAEGER_ENDPOINT=

# Health check endpoint enabled (always true in production)
HEALTH_CHECK_ENABLED=true

# ================================================================
# ENTERPRISE INTEGRATIONS (Optional)
# ================================================================

# Slack webhook for critical alerts
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK

# Microsoft Teams webhook
TEAMS_WEBHOOK_URL=

# Grafana dashboard
GRAFANA_URL=

# ================================================================
# PLATFORM-SPECIFIC CONFIGURATIONS
# ================================================================

# -------------------- FLY.IO --------------------
# Fly.io uses secrets instead of env vars
# Set secrets with: flyctl secrets set KEY=VALUE
#
# Required secrets:
#   - TELEGRAM_BOT_TOKEN
#   - OPENWEATHER_API_KEY
#   - DATABASE_URL (Supabase connection string)
#   - REDIS_URL (Upstash connection string)
#
# Set webhook URL AFTER first deployment:
#   flyctl secrets set BOT_WEBHOOK_URL=https://shopogoda.fly.dev/webhook
#
# Recommended fly.toml settings:
#   - auto_stop_machines = true (save resources)
#   - auto_start_machines = true (wake on requests)
#   - min_machines_running = 0 (scale to zero when idle)

# -------------------- VERCEL --------------------
# Vercel uses Environment Variables in dashboard
# Settings → Environment Variables → Add
#
# IMPORTANT: Use Upstash REST API (not Redis protocol)
#   - UPSTASH_REDIS_REST_URL
#   - UPSTASH_REDIS_REST_TOKEN
#
# Webhook URL format:
#   https://your-project.vercel.app/webhook
#
# Set after first deployment in Vercel dashboard
# Mark sensitive variables as "Sensitive" (encrypted at rest)

# -------------------- RAILWAY --------------------
# Railway auto-injects DATABASE_URL for PostgreSQL
# Railway auto-injects REDIS_URL for Redis
#
# Set these manually in Railway dashboard:
#   - TELEGRAM_BOT_TOKEN
#   - OPENWEATHER_API_KEY
#   - BOT_WEBHOOK_URL (after deployment)
#   - All other config vars
#
# Railway provides:
#   - ${{Postgres.DATABASE_URL}}
#   - ${{Redis.REDIS_URL}}
#
# Use these in Railway environment variables

# -------------------- GCP CLOUD RUN --------------------
# GCP uses Secret Manager + environment variables
#
# Store secrets in Secret Manager:
#   gcloud secrets create telegram-bot-token --data-file=-
#   gcloud secrets create openweather-api-key --data-file=-
#
# Cloud Run service YAML:
#   env:
#     - name: TELEGRAM_BOT_TOKEN
#       valueFrom:
#         secretKeyRef:
#           name: telegram-bot-token
#           key: latest
#
# Use Cloud SQL Proxy for database connection
# Use Memorystore for Redis (or external Upstash)

# ================================================================
# SECURITY CHECKLIST (Production)
# ================================================================
#
# ✅ BOT_DEBUG=false (no verbose logging)
# ✅ BOT_WEBHOOK_MODE=true (webhooks for production)
# ✅ DB_SSLMODE=require (encrypted database connections)
# ✅ Use transaction pooler port 6543 (not 5432)
# ✅ Strong passwords (20+ characters, mixed case, symbols)
# ✅ API keys rotated every 90 days
# ✅ Secrets stored in platform secret manager (not env vars)
# ✅ LOG_FORMAT=json (for log aggregation and analysis)
# ✅ Health checks enabled
# ✅ Monitoring and alerting configured
# ✅ Rate limiting enabled (10 requests/minute per user)
# ✅ Input validation on all user data
# ✅ HTTPS only (no HTTP fallback)
#
# ================================================================
