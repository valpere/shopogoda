# ================================================================
# ShoPogoda Weather Bot - Environment Configuration Template
# ================================================================
#
# Configuration Loading Priority (highest to lowest):
# 1. Environment variables (this file when loaded)
# 2. YAML config files: ./shopogoda.yaml, ~/.shopogoda.yaml,
#    ~/.config/shopogoda.yaml, /etc/shopogoda.yaml
# 3. Built-in defaults
#
# Copy this file to .env and customize the values for your environment.
# NEVER commit .env to version control - it contains sensitive data!
#
# Usage:
#   cp .env.example .env
#   edit .env  # Set your actual values
#
# ================================================================

# ================================================================
# BOT CONFIGURATION
# ================================================================

# Telegram Bot Token (REQUIRED)
# Get from @BotFather on Telegram
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

# Enable debug mode for verbose logging (true/false)
BOT_DEBUG=false

# Webhook configuration (leave empty for polling mode)
# Use webhook for production deployments
BOT_WEBHOOK_URL=
BOT_WEBHOOK_PORT=8080

# ================================================================
# DATABASE CONFIGURATION
# ================================================================

# PostgreSQL connection settings
DB_HOST=localhost
DB_PORT=5432
DB_USER=shopogoda
DB_PASSWORD=your_secure_database_password
DB_NAME=shopogoda
DB_SSL_MODE=disable

# ================================================================
# REDIS CONFIGURATION
# ================================================================

# Redis cache settings
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=your_redis_password_if_auth_enabled
REDIS_DB=0

# ================================================================
# WEATHER API CONFIGURATION
# ================================================================

# OpenWeatherMap API Key (REQUIRED)
# Get from https://openweathermap.org/api
OPENWEATHER_API_KEY=your_openweather_api_key_here

# Air Quality API Key (optional, fallback available)
AIRQUALITY_API_KEY=your_airquality_api_key

# User-Agent for API requests (optional)
# Default: "ShoPogoda-Weather-Bot/1.0 (contact@shopogoda.bot)"
WEATHER_USER_AGENT=ShoPogoda-Weather-Bot/1.0 (your-contact@example.com)

# ================================================================
# LOGGING CONFIGURATION
# ================================================================

# Log level: debug, info, warn, error
LOG_LEVEL=info

# Log format: json, console
LOG_FORMAT=json

# ================================================================
# MONITORING & OBSERVABILITY
# ================================================================

# Prometheus metrics port
PROMETHEUS_PORT=2112

# Jaeger tracing endpoint (optional)
JAEGER_ENDPOINT=http://localhost:14268/api/traces

# ================================================================
# ENTERPRISE INTEGRATIONS
# ================================================================

# Slack webhook URL for notifications (optional)
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK

# Microsoft Teams webhook URL for notifications (optional)
TEAMS_WEBHOOK_URL=https://your-org.webhook.office.com/webhookb2/YOUR-WEBHOOK

# Grafana dashboard URL (optional)
GRAFANA_URL=http://localhost:3000

# ================================================================
# DEVELOPMENT & TESTING
# ================================================================

# Additional environment-specific settings can be added here
# Example for different environments:

# Development
# BOT_DEBUG=true
# LOG_LEVEL=debug
# DB_NAME=shopogoda_dev

# Production
# BOT_DEBUG=false
# LOG_LEVEL=info
# DB_SSL_MODE=require
# BOT_WEBHOOK_URL=https://your-domain.com/webhook

# Testing
# DB_NAME=shopogoda_test
# REDIS_DB=1

# ================================================================
# SECURITY NOTES
# ================================================================
#
# 1. Keep your tokens and passwords secure
# 2. Use strong, unique passwords for database and Redis
# 3. Enable SSL/TLS in production (DB_SSL_MODE=require)
# 4. Use webhook mode for production deployments
# 5. Regularly rotate API keys and tokens
# 6. Consider using container secrets or key management systems
#    for production deployments
# 7. Monitor logs for suspicious activity
#
# ================================================================