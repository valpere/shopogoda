// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/services.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/valpere/shopogoda/internal/models"
	services "github.com/valpere/shopogoda/internal/services"
	weather "github.com/valpere/shopogoda/pkg/weather"
)

// MockWeatherServiceInterface is a mock of WeatherServiceInterface interface.
type MockWeatherServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherServiceInterfaceMockRecorder
}

// MockWeatherServiceInterfaceMockRecorder is the mock recorder for MockWeatherServiceInterface.
type MockWeatherServiceInterfaceMockRecorder struct {
	mock *MockWeatherServiceInterface
}

// NewMockWeatherServiceInterface creates a new mock instance.
func NewMockWeatherServiceInterface(ctrl *gomock.Controller) *MockWeatherServiceInterface {
	mock := &MockWeatherServiceInterface{ctrl: ctrl}
	mock.recorder = &MockWeatherServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherServiceInterface) EXPECT() *MockWeatherServiceInterfaceMockRecorder {
	return m.recorder
}

// GeocodeLocation mocks base method.
func (m *MockWeatherServiceInterface) GeocodeLocation(ctx context.Context, location string) (*weather.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeocodeLocation", ctx, location)
	ret0, _ := ret[0].(*weather.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeocodeLocation indicates an expected call of GeocodeLocation.
func (mr *MockWeatherServiceInterfaceMockRecorder) GeocodeLocation(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeocodeLocation", reflect.TypeOf((*MockWeatherServiceInterface)(nil).GeocodeLocation), ctx, location)
}

// GetAirQuality mocks base method.
func (m *MockWeatherServiceInterface) GetAirQuality(ctx context.Context, lat, lon float64) (*weather.AirQualityData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAirQuality", ctx, lat, lon)
	ret0, _ := ret[0].(*weather.AirQualityData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAirQuality indicates an expected call of GetAirQuality.
func (mr *MockWeatherServiceInterfaceMockRecorder) GetAirQuality(ctx, lat, lon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAirQuality", reflect.TypeOf((*MockWeatherServiceInterface)(nil).GetAirQuality), ctx, lat, lon)
}

// GetCurrentWeather mocks base method.
func (m *MockWeatherServiceInterface) GetCurrentWeather(ctx context.Context, lat, lon float64) (*services.WeatherData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentWeather", ctx, lat, lon)
	ret0, _ := ret[0].(*services.WeatherData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentWeather indicates an expected call of GetCurrentWeather.
func (mr *MockWeatherServiceInterfaceMockRecorder) GetCurrentWeather(ctx, lat, lon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentWeather", reflect.TypeOf((*MockWeatherServiceInterface)(nil).GetCurrentWeather), ctx, lat, lon)
}

// GetForecast mocks base method.
func (m *MockWeatherServiceInterface) GetForecast(ctx context.Context, lat, lon float64) ([]services.WeatherData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForecast", ctx, lat, lon)
	ret0, _ := ret[0].([]services.WeatherData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForecast indicates an expected call of GetForecast.
func (mr *MockWeatherServiceInterfaceMockRecorder) GetForecast(ctx, lat, lon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForecast", reflect.TypeOf((*MockWeatherServiceInterface)(nil).GetForecast), ctx, lat, lon)
}

// SaveWeatherData mocks base method.
func (m *MockWeatherServiceInterface) SaveWeatherData(ctx context.Context, data *models.WeatherData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWeatherData", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWeatherData indicates an expected call of SaveWeatherData.
func (mr *MockWeatherServiceInterfaceMockRecorder) SaveWeatherData(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWeatherData", reflect.TypeOf((*MockWeatherServiceInterface)(nil).SaveWeatherData), ctx, data)
}

// MockUserServiceInterface is a mock of UserServiceInterface interface.
type MockUserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceInterfaceMockRecorder
}

// MockUserServiceInterfaceMockRecorder is the mock recorder for MockUserServiceInterface.
type MockUserServiceInterfaceMockRecorder struct {
	mock *MockUserServiceInterface
}

// NewMockUserServiceInterface creates a new mock instance.
func NewMockUserServiceInterface(ctrl *gomock.Controller) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceInterface) EXPECT() *MockUserServiceInterfaceMockRecorder {
	return m.recorder
}

// ClearUserLocation mocks base method.
func (m *MockUserServiceInterface) ClearUserLocation(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearUserLocation", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearUserLocation indicates an expected call of ClearUserLocation.
func (mr *MockUserServiceInterfaceMockRecorder) ClearUserLocation(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearUserLocation", reflect.TypeOf((*MockUserServiceInterface)(nil).ClearUserLocation), ctx, userID)
}

// ConvertToUTC mocks base method.
func (m *MockUserServiceInterface) ConvertToUTC(ctx context.Context, userID int64, localTime time.Time) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToUTC", ctx, userID, localTime)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ConvertToUTC indicates an expected call of ConvertToUTC.
func (mr *MockUserServiceInterfaceMockRecorder) ConvertToUTC(ctx, userID, localTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToUTC", reflect.TypeOf((*MockUserServiceInterface)(nil).ConvertToUTC), ctx, userID, localTime)
}

// ConvertToUserTime mocks base method.
func (m *MockUserServiceInterface) ConvertToUserTime(ctx context.Context, userID int64, utcTime time.Time) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToUserTime", ctx, userID, utcTime)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ConvertToUserTime indicates an expected call of ConvertToUserTime.
func (mr *MockUserServiceInterfaceMockRecorder) ConvertToUserTime(ctx, userID, utcTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToUserTime", reflect.TypeOf((*MockUserServiceInterface)(nil).ConvertToUserTime), ctx, userID, utcTime)
}

// CreateUser mocks base method.
func (m *MockUserServiceInterface) CreateUser(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceInterfaceMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceInterface)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUserServiceInterface) DeleteUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceInterfaceMockRecorder) DeleteUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserServiceInterface)(nil).DeleteUser), ctx, userID)
}

// GetActiveUsersWithLocations mocks base method.
func (m *MockUserServiceInterface) GetActiveUsersWithLocations(ctx context.Context) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveUsersWithLocations", ctx)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveUsersWithLocations indicates an expected call of GetActiveUsersWithLocations.
func (mr *MockUserServiceInterfaceMockRecorder) GetActiveUsersWithLocations(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveUsersWithLocations", reflect.TypeOf((*MockUserServiceInterface)(nil).GetActiveUsersWithLocations), ctx)
}

// GetUser mocks base method.
func (m *MockUserServiceInterface) GetUser(ctx context.Context, userID int64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceInterfaceMockRecorder) GetUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServiceInterface)(nil).GetUser), ctx, userID)
}

// GetUserLanguage mocks base method.
func (m *MockUserServiceInterface) GetUserLanguage(ctx context.Context, userID int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLanguage", ctx, userID)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserLanguage indicates an expected call of GetUserLanguage.
func (mr *MockUserServiceInterfaceMockRecorder) GetUserLanguage(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLanguage", reflect.TypeOf((*MockUserServiceInterface)(nil).GetUserLanguage), ctx, userID)
}

// GetUserLocation mocks base method.
func (m *MockUserServiceInterface) GetUserLocation(ctx context.Context, userID int64) (string, float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLocation", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(float64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetUserLocation indicates an expected call of GetUserLocation.
func (mr *MockUserServiceInterfaceMockRecorder) GetUserLocation(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLocation", reflect.TypeOf((*MockUserServiceInterface)(nil).GetUserLocation), ctx, userID)
}

// GetUserTimezone mocks base method.
func (m *MockUserServiceInterface) GetUserTimezone(ctx context.Context, userID int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTimezone", ctx, userID)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserTimezone indicates an expected call of GetUserTimezone.
func (mr *MockUserServiceInterfaceMockRecorder) GetUserTimezone(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTimezone", reflect.TypeOf((*MockUserServiceInterface)(nil).GetUserTimezone), ctx, userID)
}

// SetUserLanguage mocks base method.
func (m *MockUserServiceInterface) SetUserLanguage(ctx context.Context, userID int64, language string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserLanguage", ctx, userID, language)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserLanguage indicates an expected call of SetUserLanguage.
func (mr *MockUserServiceInterfaceMockRecorder) SetUserLanguage(ctx, userID, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserLanguage", reflect.TypeOf((*MockUserServiceInterface)(nil).SetUserLanguage), ctx, userID, language)
}

// SetUserLocation mocks base method.
func (m *MockUserServiceInterface) SetUserLocation(ctx context.Context, userID int64, locationName, country, city string, lat, lon float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserLocation", ctx, userID, locationName, country, city, lat, lon)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserLocation indicates an expected call of SetUserLocation.
func (mr *MockUserServiceInterfaceMockRecorder) SetUserLocation(ctx, userID, locationName, country, city, lat, lon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserLocation", reflect.TypeOf((*MockUserServiceInterface)(nil).SetUserLocation), ctx, userID, locationName, country, city, lat, lon)
}

// SetUserTimezone mocks base method.
func (m *MockUserServiceInterface) SetUserTimezone(ctx context.Context, userID int64, timezone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserTimezone", ctx, userID, timezone)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserTimezone indicates an expected call of SetUserTimezone.
func (mr *MockUserServiceInterfaceMockRecorder) SetUserTimezone(ctx, userID, timezone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserTimezone", reflect.TypeOf((*MockUserServiceInterface)(nil).SetUserTimezone), ctx, userID, timezone)
}

// UpdateUser mocks base method.
func (m *MockUserServiceInterface) UpdateUser(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceInterfaceMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserServiceInterface)(nil).UpdateUser), ctx, user)
}

// MockAlertServiceInterface is a mock of AlertServiceInterface interface.
type MockAlertServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAlertServiceInterfaceMockRecorder
}

// MockAlertServiceInterfaceMockRecorder is the mock recorder for MockAlertServiceInterface.
type MockAlertServiceInterfaceMockRecorder struct {
	mock *MockAlertServiceInterface
}

// NewMockAlertServiceInterface creates a new mock instance.
func NewMockAlertServiceInterface(ctrl *gomock.Controller) *MockAlertServiceInterface {
	mock := &MockAlertServiceInterface{ctrl: ctrl}
	mock.recorder = &MockAlertServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertServiceInterface) EXPECT() *MockAlertServiceInterfaceMockRecorder {
	return m.recorder
}

// CheckAlertsForUser mocks base method.
func (m *MockAlertServiceInterface) CheckAlertsForUser(ctx context.Context, userID int64, weatherData *services.WeatherData) ([]*models.EnvironmentalAlert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAlertsForUser", ctx, userID, weatherData)
	ret0, _ := ret[0].([]*models.EnvironmentalAlert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAlertsForUser indicates an expected call of CheckAlertsForUser.
func (mr *MockAlertServiceInterfaceMockRecorder) CheckAlertsForUser(ctx, userID, weatherData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAlertsForUser", reflect.TypeOf((*MockAlertServiceInterface)(nil).CheckAlertsForUser), ctx, userID, weatherData)
}

// CreateAlert mocks base method.
func (m *MockAlertServiceInterface) CreateAlert(ctx context.Context, alert *models.EnvironmentalAlert) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlert", ctx, alert)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAlert indicates an expected call of CreateAlert.
func (mr *MockAlertServiceInterfaceMockRecorder) CreateAlert(ctx, alert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlert", reflect.TypeOf((*MockAlertServiceInterface)(nil).CreateAlert), ctx, alert)
}

// DeleteAlert mocks base method.
func (m *MockAlertServiceInterface) DeleteAlert(ctx context.Context, alertID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlert", ctx, alertID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlert indicates an expected call of DeleteAlert.
func (mr *MockAlertServiceInterfaceMockRecorder) DeleteAlert(ctx, alertID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlert", reflect.TypeOf((*MockAlertServiceInterface)(nil).DeleteAlert), ctx, alertID)
}

// GetAlert mocks base method.
func (m *MockAlertServiceInterface) GetAlert(ctx context.Context, alertID string) (*models.EnvironmentalAlert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlert", ctx, alertID)
	ret0, _ := ret[0].(*models.EnvironmentalAlert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlert indicates an expected call of GetAlert.
func (mr *MockAlertServiceInterfaceMockRecorder) GetAlert(ctx, alertID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlert", reflect.TypeOf((*MockAlertServiceInterface)(nil).GetAlert), ctx, alertID)
}

// GetUserAlerts mocks base method.
func (m *MockAlertServiceInterface) GetUserAlerts(ctx context.Context, userID int64) ([]*models.EnvironmentalAlert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAlerts", ctx, userID)
	ret0, _ := ret[0].([]*models.EnvironmentalAlert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAlerts indicates an expected call of GetUserAlerts.
func (mr *MockAlertServiceInterfaceMockRecorder) GetUserAlerts(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAlerts", reflect.TypeOf((*MockAlertServiceInterface)(nil).GetUserAlerts), ctx, userID)
}

// TriggerAlert mocks base method.
func (m *MockAlertServiceInterface) TriggerAlert(ctx context.Context, alert *models.EnvironmentalAlert, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerAlert", ctx, alert, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// TriggerAlert indicates an expected call of TriggerAlert.
func (mr *MockAlertServiceInterfaceMockRecorder) TriggerAlert(ctx, alert, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerAlert", reflect.TypeOf((*MockAlertServiceInterface)(nil).TriggerAlert), ctx, alert, value)
}

// UpdateAlert mocks base method.
func (m *MockAlertServiceInterface) UpdateAlert(ctx context.Context, alert *models.EnvironmentalAlert) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlert", ctx, alert)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAlert indicates an expected call of UpdateAlert.
func (mr *MockAlertServiceInterfaceMockRecorder) UpdateAlert(ctx, alert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlert", reflect.TypeOf((*MockAlertServiceInterface)(nil).UpdateAlert), ctx, alert)
}

// MockNotificationServiceInterface is a mock of NotificationServiceInterface interface.
type MockNotificationServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServiceInterfaceMockRecorder
}

// MockNotificationServiceInterfaceMockRecorder is the mock recorder for MockNotificationServiceInterface.
type MockNotificationServiceInterfaceMockRecorder struct {
	mock *MockNotificationServiceInterface
}

// NewMockNotificationServiceInterface creates a new mock instance.
func NewMockNotificationServiceInterface(ctrl *gomock.Controller) *MockNotificationServiceInterface {
	mock := &MockNotificationServiceInterface{ctrl: ctrl}
	mock.recorder = &MockNotificationServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationServiceInterface) EXPECT() *MockNotificationServiceInterfaceMockRecorder {
	return m.recorder
}

// SendSlackAlert mocks base method.
func (m *MockNotificationServiceInterface) SendSlackAlert(alert *models.EnvironmentalAlert, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSlackAlert", alert, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSlackAlert indicates an expected call of SendSlackAlert.
func (mr *MockNotificationServiceInterfaceMockRecorder) SendSlackAlert(alert, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSlackAlert", reflect.TypeOf((*MockNotificationServiceInterface)(nil).SendSlackAlert), alert, user)
}

// SendSlackWeatherUpdate mocks base method.
func (m *MockNotificationServiceInterface) SendSlackWeatherUpdate(weatherData *services.WeatherData, subscribers []models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSlackWeatherUpdate", weatherData, subscribers)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSlackWeatherUpdate indicates an expected call of SendSlackWeatherUpdate.
func (mr *MockNotificationServiceInterfaceMockRecorder) SendSlackWeatherUpdate(weatherData, subscribers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSlackWeatherUpdate", reflect.TypeOf((*MockNotificationServiceInterface)(nil).SendSlackWeatherUpdate), weatherData, subscribers)
}

// SendTelegramAlert mocks base method.
func (m *MockNotificationServiceInterface) SendTelegramAlert(alert *models.EnvironmentalAlert, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTelegramAlert", alert, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTelegramAlert indicates an expected call of SendTelegramAlert.
func (mr *MockNotificationServiceInterfaceMockRecorder) SendTelegramAlert(alert, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTelegramAlert", reflect.TypeOf((*MockNotificationServiceInterface)(nil).SendTelegramAlert), alert, user)
}

// SendTelegramWeatherUpdate mocks base method.
func (m *MockNotificationServiceInterface) SendTelegramWeatherUpdate(weatherData *services.WeatherData, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTelegramWeatherUpdate", weatherData, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTelegramWeatherUpdate indicates an expected call of SendTelegramWeatherUpdate.
func (mr *MockNotificationServiceInterfaceMockRecorder) SendTelegramWeatherUpdate(weatherData, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTelegramWeatherUpdate", reflect.TypeOf((*MockNotificationServiceInterface)(nil).SendTelegramWeatherUpdate), weatherData, user)
}

// SendTelegramWeeklyUpdate mocks base method.
func (m *MockNotificationServiceInterface) SendTelegramWeeklyUpdate(weatherData *services.WeatherData, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTelegramWeeklyUpdate", weatherData, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTelegramWeeklyUpdate indicates an expected call of SendTelegramWeeklyUpdate.
func (mr *MockNotificationServiceInterfaceMockRecorder) SendTelegramWeeklyUpdate(weatherData, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTelegramWeeklyUpdate", reflect.TypeOf((*MockNotificationServiceInterface)(nil).SendTelegramWeeklyUpdate), weatherData, user)
}

// MockSubscriptionServiceInterface is a mock of SubscriptionServiceInterface interface.
type MockSubscriptionServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionServiceInterfaceMockRecorder
}

// MockSubscriptionServiceInterfaceMockRecorder is the mock recorder for MockSubscriptionServiceInterface.
type MockSubscriptionServiceInterfaceMockRecorder struct {
	mock *MockSubscriptionServiceInterface
}

// NewMockSubscriptionServiceInterface creates a new mock instance.
func NewMockSubscriptionServiceInterface(ctrl *gomock.Controller) *MockSubscriptionServiceInterface {
	mock := &MockSubscriptionServiceInterface{ctrl: ctrl}
	mock.recorder = &MockSubscriptionServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionServiceInterface) EXPECT() *MockSubscriptionServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateSubscription mocks base method.
func (m *MockSubscriptionServiceInterface) CreateSubscription(ctx context.Context, subscription *models.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockSubscriptionServiceInterfaceMockRecorder) CreateSubscription(ctx, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockSubscriptionServiceInterface)(nil).CreateSubscription), ctx, subscription)
}

// DeleteSubscription mocks base method.
func (m *MockSubscriptionServiceInterface) DeleteSubscription(ctx context.Context, subscriptionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockSubscriptionServiceInterfaceMockRecorder) DeleteSubscription(ctx, subscriptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockSubscriptionServiceInterface)(nil).DeleteSubscription), ctx, subscriptionID)
}

// GetActiveSubscriptionsByTime mocks base method.
func (m *MockSubscriptionServiceInterface) GetActiveSubscriptionsByTime(ctx context.Context, hour int) ([]*models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveSubscriptionsByTime", ctx, hour)
	ret0, _ := ret[0].([]*models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveSubscriptionsByTime indicates an expected call of GetActiveSubscriptionsByTime.
func (mr *MockSubscriptionServiceInterfaceMockRecorder) GetActiveSubscriptionsByTime(ctx, hour interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSubscriptionsByTime", reflect.TypeOf((*MockSubscriptionServiceInterface)(nil).GetActiveSubscriptionsByTime), ctx, hour)
}

// GetActiveSubscriptionsByType mocks base method.
func (m *MockSubscriptionServiceInterface) GetActiveSubscriptionsByType(ctx context.Context, subscriptionType models.SubscriptionType) ([]*models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveSubscriptionsByType", ctx, subscriptionType)
	ret0, _ := ret[0].([]*models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveSubscriptionsByType indicates an expected call of GetActiveSubscriptionsByType.
func (mr *MockSubscriptionServiceInterfaceMockRecorder) GetActiveSubscriptionsByType(ctx, subscriptionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSubscriptionsByType", reflect.TypeOf((*MockSubscriptionServiceInterface)(nil).GetActiveSubscriptionsByType), ctx, subscriptionType)
}

// GetSubscription mocks base method.
func (m *MockSubscriptionServiceInterface) GetSubscription(ctx context.Context, subscriptionID string) (*models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(*models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockSubscriptionServiceInterfaceMockRecorder) GetSubscription(ctx, subscriptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockSubscriptionServiceInterface)(nil).GetSubscription), ctx, subscriptionID)
}

// GetUserSubscriptions mocks base method.
func (m *MockSubscriptionServiceInterface) GetUserSubscriptions(ctx context.Context, userID int64) ([]*models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSubscriptions", ctx, userID)
	ret0, _ := ret[0].([]*models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSubscriptions indicates an expected call of GetUserSubscriptions.
func (mr *MockSubscriptionServiceInterfaceMockRecorder) GetUserSubscriptions(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSubscriptions", reflect.TypeOf((*MockSubscriptionServiceInterface)(nil).GetUserSubscriptions), ctx, userID)
}

// UpdateSubscription mocks base method.
func (m *MockSubscriptionServiceInterface) UpdateSubscription(ctx context.Context, subscription *models.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", ctx, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockSubscriptionServiceInterfaceMockRecorder) UpdateSubscription(ctx, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockSubscriptionServiceInterface)(nil).UpdateSubscription), ctx, subscription)
}

// MockLocalizationServiceInterface is a mock of LocalizationServiceInterface interface.
type MockLocalizationServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLocalizationServiceInterfaceMockRecorder
}

// MockLocalizationServiceInterfaceMockRecorder is the mock recorder for MockLocalizationServiceInterface.
type MockLocalizationServiceInterfaceMockRecorder struct {
	mock *MockLocalizationServiceInterface
}

// NewMockLocalizationServiceInterface creates a new mock instance.
func NewMockLocalizationServiceInterface(ctrl *gomock.Controller) *MockLocalizationServiceInterface {
	mock := &MockLocalizationServiceInterface{ctrl: ctrl}
	mock.recorder = &MockLocalizationServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalizationServiceInterface) EXPECT() *MockLocalizationServiceInterfaceMockRecorder {
	return m.recorder
}

// GetSupportedLanguages mocks base method.
func (m *MockLocalizationServiceInterface) GetSupportedLanguages() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedLanguages")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetSupportedLanguages indicates an expected call of GetSupportedLanguages.
func (mr *MockLocalizationServiceInterfaceMockRecorder) GetSupportedLanguages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedLanguages", reflect.TypeOf((*MockLocalizationServiceInterface)(nil).GetSupportedLanguages))
}

// IsLanguageSupported mocks base method.
func (m *MockLocalizationServiceInterface) IsLanguageSupported(language string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLanguageSupported", language)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLanguageSupported indicates an expected call of IsLanguageSupported.
func (mr *MockLocalizationServiceInterfaceMockRecorder) IsLanguageSupported(language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLanguageSupported", reflect.TypeOf((*MockLocalizationServiceInterface)(nil).IsLanguageSupported), language)
}

// T mocks base method.
func (m *MockLocalizationServiceInterface) T(ctx context.Context, language, key string, args ...interface{}) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, language, key}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "T", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// T indicates an expected call of T.
func (mr *MockLocalizationServiceInterfaceMockRecorder) T(ctx, language, key interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, language, key}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "T", reflect.TypeOf((*MockLocalizationServiceInterface)(nil).T), varargs...)
}

// MockExportServiceInterface is a mock of ExportServiceInterface interface.
type MockExportServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExportServiceInterfaceMockRecorder
}

// MockExportServiceInterfaceMockRecorder is the mock recorder for MockExportServiceInterface.
type MockExportServiceInterfaceMockRecorder struct {
	mock *MockExportServiceInterface
}

// NewMockExportServiceInterface creates a new mock instance.
func NewMockExportServiceInterface(ctrl *gomock.Controller) *MockExportServiceInterface {
	mock := &MockExportServiceInterface{ctrl: ctrl}
	mock.recorder = &MockExportServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportServiceInterface) EXPECT() *MockExportServiceInterfaceMockRecorder {
	return m.recorder
}

// ExportAlerts mocks base method.
func (m *MockExportServiceInterface) ExportAlerts(ctx context.Context, userID int64, format services.ExportFormat) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportAlerts", ctx, userID, format)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportAlerts indicates an expected call of ExportAlerts.
func (mr *MockExportServiceInterfaceMockRecorder) ExportAlerts(ctx, userID, format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportAlerts", reflect.TypeOf((*MockExportServiceInterface)(nil).ExportAlerts), ctx, userID, format)
}

// ExportSubscriptions mocks base method.
func (m *MockExportServiceInterface) ExportSubscriptions(ctx context.Context, userID int64, format services.ExportFormat) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportSubscriptions", ctx, userID, format)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportSubscriptions indicates an expected call of ExportSubscriptions.
func (mr *MockExportServiceInterfaceMockRecorder) ExportSubscriptions(ctx, userID, format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportSubscriptions", reflect.TypeOf((*MockExportServiceInterface)(nil).ExportSubscriptions), ctx, userID, format)
}

// ExportUserData mocks base method.
func (m *MockExportServiceInterface) ExportUserData(ctx context.Context, userID int64, format services.ExportFormat, dataType services.ExportType) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportUserData", ctx, userID, format, dataType)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportUserData indicates an expected call of ExportUserData.
func (mr *MockExportServiceInterfaceMockRecorder) ExportUserData(ctx, userID, format, dataType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportUserData", reflect.TypeOf((*MockExportServiceInterface)(nil).ExportUserData), ctx, userID, format, dataType)
}

// ExportWeatherData mocks base method.
func (m *MockExportServiceInterface) ExportWeatherData(ctx context.Context, userID int64, format services.ExportFormat) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportWeatherData", ctx, userID, format)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportWeatherData indicates an expected call of ExportWeatherData.
func (mr *MockExportServiceInterfaceMockRecorder) ExportWeatherData(ctx, userID, format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportWeatherData", reflect.TypeOf((*MockExportServiceInterface)(nil).ExportWeatherData), ctx, userID, format)
}

// MockSchedulerServiceInterface is a mock of SchedulerServiceInterface interface.
type MockSchedulerServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerServiceInterfaceMockRecorder
}

// MockSchedulerServiceInterfaceMockRecorder is the mock recorder for MockSchedulerServiceInterface.
type MockSchedulerServiceInterfaceMockRecorder struct {
	mock *MockSchedulerServiceInterface
}

// NewMockSchedulerServiceInterface creates a new mock instance.
func NewMockSchedulerServiceInterface(ctrl *gomock.Controller) *MockSchedulerServiceInterface {
	mock := &MockSchedulerServiceInterface{ctrl: ctrl}
	mock.recorder = &MockSchedulerServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerServiceInterface) EXPECT() *MockSchedulerServiceInterfaceMockRecorder {
	return m.recorder
}

// ProcessScheduledNotifications mocks base method.
func (m *MockSchedulerServiceInterface) ProcessScheduledNotifications(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessScheduledNotifications", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessScheduledNotifications indicates an expected call of ProcessScheduledNotifications.
func (mr *MockSchedulerServiceInterfaceMockRecorder) ProcessScheduledNotifications(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessScheduledNotifications", reflect.TypeOf((*MockSchedulerServiceInterface)(nil).ProcessScheduledNotifications), ctx)
}

// ProcessWeatherAlerts mocks base method.
func (m *MockSchedulerServiceInterface) ProcessWeatherAlerts(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessWeatherAlerts", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessWeatherAlerts indicates an expected call of ProcessWeatherAlerts.
func (mr *MockSchedulerServiceInterfaceMockRecorder) ProcessWeatherAlerts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessWeatherAlerts", reflect.TypeOf((*MockSchedulerServiceInterface)(nil).ProcessWeatherAlerts), ctx)
}

// Start mocks base method.
func (m *MockSchedulerServiceInterface) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockSchedulerServiceInterfaceMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSchedulerServiceInterface)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockSchedulerServiceInterface) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockSchedulerServiceInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSchedulerServiceInterface)(nil).Stop))
}
