// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/weather_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	weather "github.com/valpere/shopogoda/pkg/weather"
)

// MockWeatherClientInterface is a mock of WeatherClientInterface interface.
type MockWeatherClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherClientInterfaceMockRecorder
}

// MockWeatherClientInterfaceMockRecorder is the mock recorder for MockWeatherClientInterface.
type MockWeatherClientInterfaceMockRecorder struct {
	mock *MockWeatherClientInterface
}

// NewMockWeatherClientInterface creates a new mock instance.
func NewMockWeatherClientInterface(ctrl *gomock.Controller) *MockWeatherClientInterface {
	mock := &MockWeatherClientInterface{ctrl: ctrl}
	mock.recorder = &MockWeatherClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherClientInterface) EXPECT() *MockWeatherClientInterfaceMockRecorder {
	return m.recorder
}

// GetAirQuality mocks base method.
func (m *MockWeatherClientInterface) GetAirQuality(ctx context.Context, lat, lon float64) (*weather.AirQualityData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAirQuality", ctx, lat, lon)
	ret0, _ := ret[0].(*weather.AirQualityData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAirQuality indicates an expected call of GetAirQuality.
func (mr *MockWeatherClientInterfaceMockRecorder) GetAirQuality(ctx, lat, lon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAirQuality", reflect.TypeOf((*MockWeatherClientInterface)(nil).GetAirQuality), ctx, lat, lon)
}

// GetCurrentWeather mocks base method.
func (m *MockWeatherClientInterface) GetCurrentWeather(ctx context.Context, lat, lon float64) (*weather.WeatherData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentWeather", ctx, lat, lon)
	ret0, _ := ret[0].(*weather.WeatherData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentWeather indicates an expected call of GetCurrentWeather.
func (mr *MockWeatherClientInterfaceMockRecorder) GetCurrentWeather(ctx, lat, lon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentWeather", reflect.TypeOf((*MockWeatherClientInterface)(nil).GetCurrentWeather), ctx, lat, lon)
}

// GetForecast mocks base method.
func (m *MockWeatherClientInterface) GetForecast(ctx context.Context, lat, lon float64, days int) (*weather.ForecastData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForecast", ctx, lat, lon, days)
	ret0, _ := ret[0].(*weather.ForecastData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForecast indicates an expected call of GetForecast.
func (mr *MockWeatherClientInterfaceMockRecorder) GetForecast(ctx, lat, lon, days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForecast", reflect.TypeOf((*MockWeatherClientInterface)(nil).GetForecast), ctx, lat, lon, days)
}

// MockGeocodingClientInterface is a mock of GeocodingClientInterface interface.
type MockGeocodingClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGeocodingClientInterfaceMockRecorder
}

// MockGeocodingClientInterfaceMockRecorder is the mock recorder for MockGeocodingClientInterface.
type MockGeocodingClientInterfaceMockRecorder struct {
	mock *MockGeocodingClientInterface
}

// NewMockGeocodingClientInterface creates a new mock instance.
func NewMockGeocodingClientInterface(ctrl *gomock.Controller) *MockGeocodingClientInterface {
	mock := &MockGeocodingClientInterface{ctrl: ctrl}
	mock.recorder = &MockGeocodingClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeocodingClientInterface) EXPECT() *MockGeocodingClientInterfaceMockRecorder {
	return m.recorder
}

// GeocodeLocation mocks base method.
func (m *MockGeocodingClientInterface) GeocodeLocation(ctx context.Context, location string) (*weather.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeocodeLocation", ctx, location)
	ret0, _ := ret[0].(*weather.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeocodeLocation indicates an expected call of GeocodeLocation.
func (mr *MockGeocodingClientInterfaceMockRecorder) GeocodeLocation(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeocodeLocation", reflect.TypeOf((*MockGeocodingClientInterface)(nil).GeocodeLocation), ctx, location)
}
