version: '3.8'

# Staging deployment configuration for ShoPogoda
# Usage: docker-compose -f docker-compose.staging.yml up -d

services:
  # ShoPogoda Bot Application
  bot:
    image: ghcr.io/${GITHUB_REPOSITORY:-valpere/shopogoda}:${VERSION:-develop}
    container_name: shopogoda-bot-staging
    restart: unless-stopped
    env_file:
      - ../.env.staging
    environment:
      # Staging-specific settings
      BOT_DEBUG: "true"
      LOG_LEVEL: "debug"
      LOG_FORMAT: "json"
      DB_HOST: postgres
      DB_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "${BOT_WEBHOOK_PORT:-8081}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - shopogoda-staging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: shopogoda-db-staging
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-shopogoda_staging}
      POSTGRES_USER: ${DB_USER:-shopogoda}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-staging_password}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-shopogoda} -d ${DB_NAME:-shopogoda_staging}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - shopogoda-staging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: shopogoda-redis-staging
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6381:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - shopogoda-staging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: shopogoda-prometheus-staging
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ../deployments/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - shopogoda-staging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: shopogoda-grafana-staging
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin123}
      GF_SERVER_ROOT_URL: ${GRAFANA_URL:-http://localhost:3001}
      GF_SECURITY_ADMIN_USER: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ../deployments/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - shopogoda-staging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  shopogoda-staging:
    driver: bridge
    name: shopogoda-staging-network
